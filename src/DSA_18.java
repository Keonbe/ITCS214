import java.util.Scanner;
import java.util.LinkedList;
import java.lang.Math;

//INCOMPLETE

/**
 LINKEDLIST PROBLEM
 Write a program that will continuously accept a series of integers and stop when a sentinel value of 888 is entered.
 Your program should group the elements after every input so that elements with duplicates will be stored next to each other.
 Display the final contents of the linked list.
 Arrays should not be sorted.
 Elements will be displayed based on the order they are entered.
 Note: Use LinkedList Data Structure

 ARRAY PROBLEM(2d arr)
 One of the many games you can find in an arcade is the pinball machine.
 Player is given 16 attempts to drop a ball to a specific hole numbered from1 to 16. When a ball drops at hole number 5, the corresponding number 5 on the machine will light.
 The goal of the game is to create a straight line (with 4 lights on).
 It may be diagonal, horizontal or vertical. There are 10 straight lines that can be formed in total(4 horizontal lines, 4 vertical lines and 2 diagonals).
 Prizes are given depending on the number of lines formed. For example:
 Number of Lines Prize
 3-4 25 tickets
 5-6 50 tickets
 7-8 75 tickets
 9 100 tickets
 10 200 tickets
 If the player is able to create the following combination, there
 are 3 lines formed. Therefore, the player wins 25 tickets

 Write a program that will mimic the Indiana Jones Pinball Machine
 by creating a 4x4 array. Perform the following operations:
 1. Populate the array with random values 1 and 0.
 1 means the light is on. 0 means the light is off
 You may use the code below method to generate random integer
 numbers from 0 to 1.
 Light is on
 Light is off
 int num = (int) (Math.random()*2) ;
 2. Count and display the number of lines that are all 1s.
 3. Determine the number of tickets won.

 Illustration:
 If the random values generated by Math.random() method are as
 follows, it will be stored in an 4x4 array.
 The table above can be represented in the pinball machine as:
 Here, the player is able to form 5 lines. Your program should
 display corresponding prize won.
 */

public class DSA_18 {
        public static void main(String[] args) {
            Scanner scanner = new Scanner(System.in);
            int numselc = 0; //CHOICE
            System.out.print("====================================================" +
                    "\nChoose a problem to run:" + "\n[1] Linked List Problem" + "\n[2] Array Problem" + "\n[3] Exit" +
                    "\n====================================================" + "\nEnter your choice:");
            numselc = scanner.nextInt();


            do{ //ONLY LOOP SELECTION, NOT THE OUTPUT - USE SWITCH
                if (numselc == 1){
                    LinkedListProblem();
                    Selection(numselc);

                }
                if (numselc == 2){
                    ArrayProblem();
                    Selection(numselc);
                }
                else {
                    System.out.print("Invalid Input\n");
                    //break; //DONT PUT INVALID INPUT HERE, read algo/logic twice
                }
                System.out.print("Invalid Input\n");
                //JUST INCASE
            } while (numselc != 3);

            //System.exit(0);
        } //END MAIN PROGRAM


        public static void LinkedListProblem(){ //TO FIX: if duplicate then next to same num, 888 not print
            Scanner scanner = new Scanner(System.in);
            LinkedList<Integer> list = new LinkedList<Integer>(); //Declare LL
            System.out.print("Enter element:");
            int input = scanner.nextInt(); //ASK ELEM, INITIAL STATEMENT
            list.add(input);

            do{
                System.out.println(list); //LOOPING STATEMENT
                System.out.print("Enter element:");
                input = scanner.nextInt();
                //list.add(input);

                //if (elem == as index{
                //elem list.add(prev, elem)
                int index = 0;
                if(index < list.size() && list.get(index) < input){ //LOOPING CONDITIONAL
                    index++;
                }
                list.add(index, input); //BUG ADDING BUT not reset
                //index = 0; //RESET TO ABOVE PROBLEM

                if(input == 888){ //EXIT METHOD
                    list.removeLast();
                    System.out.println(list);
                    break;
                }

            }while (input != 888);

            //System.out.println(list);
        }//END LLProb METHOD


        public static void ArrayProblem(){
            Scanner scanner = new Scanner(System.in);
            int num = (int) (Math.random()*2);
            int lines = 0;
            int[][] IJP = { {num, num, num, num},
                    {num, num, num, num},
                    {num, num, num, num}};
            System.out.println("====================================================");
            //loop array i j k,for comparing start
            //end

            for(int i = 0; i < 4 ;i++){
                for(int j = 0; j < 4 ;j++){
                    System.out.println(IJP[i][j] + " ");
                }
            }

            System.out.println("Number of line/s formed: " + lines);
            if (lines > 3){
                System.out.println("Sorry, Better Luck Next Time");
            }
            if(lines == 3 || lines == 4){
                System.out.println("You win 25 tickets");
            } else if(lines == 5 || lines == 6){
                System.out.println("You win 50 tickets");
            } else if(lines == 7 || lines == 8){
                System.out.println("You win 75 tickets");
            } else if (lines == 9 ){
                System.out.println("You win 100 tickets");
            } else if (lines == 10){
                System.out.println("You win 200 tickets");
            }


        }//END ARRProb

        public static int Selection(int numselc){ //COMPLETE
            Scanner scanner = new Scanner(System.in);
            numselc = 0;
            System.out.print("====================================================" +
                    "\nChoose a problem to run:" + "\n[1] Linked List Problem" + "\n[2] Array Problem" + "\n[3] Exit" +
                    "\n====================================================" + "\nEnter your choice:");
            numselc = scanner.nextInt();
            return numselc;
        }//END SELC
    }//END CLASS

